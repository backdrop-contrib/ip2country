<?php

/**
 * @file
 * Tests suite for the ip2country module.
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/**
 * 1 class for unit tests, 1 class for functional tests
 * 1 class for DB update tests because they take so long
 */
class ip2countryTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name'        => t('IP/Country lookup '),
      'description' => t('Test operations of IP to Country module.'),
      'group'       => t('IP to Country'),
    );
  }


  /**
   * Overrides DrupalWebTestCase::setUp().
   */
  function setUp() {
    // Don't install ip2country! parent::setUp() creates a clean
    // environment, so we can influence the install before we call setUp().
    // We don't want the DB populated, so we'll manually install ip2country.
    parent::setUp();

    // Turn off automatic DB download when module is installed.
    variable_set('ip2country_populate_database_on_install', FALSE);

    // Explicitly enable the module so that it will have access
    // to the variable we set above.
    $status = module_enable(array('ip2country'), FALSE);
    $this->resetAll();  // The secret ingredient

    $this->assertTrue(
      $status,
      t('Module %module enabled.', array('%module' => 'ip2country'))
    );
    $this->assertTrue(
      (ip2country_get_count() == 0),
      t('Database is empty.')
    );

    // Create and log in our test user.
    $admin_user = $this->drupalCreateUser(array('administer ip2country'));
    //$admin_user = $this->drupalCreateUser();
    $this->drupalLogin($admin_user);
  }


  /**
   * Tests IP lookup for addresses in / not in the database.
   */
  function testIPLookup() {
    ip2country_update_database('arin');

    $this->assertTrue(
      ($count = ip2country_get_count()) != 0,
      t('Database has been updated with @rows rows.', array('@rows' => $count))
    );

    // Real working IPs
    $ip_array = array(
      '125.29.33.201', '212.58.224.138',
      '184.51.240.110', '210.87.9.66'
    );
    foreach ($ip_array as $ip_address) {
      $country = ip2country_get_country($ip_address);
      $this->assertTrue(
        $country,
        t('@ip found, resolved to @country.', array('@ip' => $ip_address, '@country' => $country))
      );
      $this->pass(t('testIPLookup passed.'));
    }

    // Invalid and reserved IPs
    $ip_array = array(
      '127.0.0.1', '358.1.1.0'
    );
    foreach ($ip_array as $ip_address) {
      $country = ip2country_get_country($ip_address);
      $this->assertFalse(
        $country,
        t('@ip not found in database.', array('@ip' => $ip_address))
      );
      $this->pass(t('testIPLookup passed.'));
    }

    ip2country_empty_database();
    $this->assertTrue(
      (ip2country_get_count() == 0),
      t('Database is Empty.')
    );
  }

  /**
   * Tests injecting IP data via hook_ip2country_alter()
   */
  function testAlterHook() {
    $this->pass(t('testAlterHook passed.'));
  }

  /**
   * Tests Default country
   */
  function testDefaultCountry() {
    $this->pass(t('testDefaultCountry passed.'));
  }

  /**
   * Tests anonymous vs authenticated users
   */
  function testUserAccess() {
    $this->pass(t('testUserAccess passed.'));
  }

  /**
   * Tests $user object for proper value
   */
  function testUserObject() {
    $this->pass(t('testUserObject passed.'));
  }

  /**
   * Tests UI
   */
  function testUI() {
    $this->pass(t('testUI passed.'));
  }

  /**
   * Tests IP Spoofing
   * -- anonymous vs authenticated users
   * Check for info $messages
   */
  function testIPSpoofing() {
    $this->pass(t('testIPSpoofing passed.'));
  }

  /**
   * Tests Country Spoofing
   * -- anonymous vs authenticated users
   * Check for info $messages
   */
  function testCountrySpoofing() {
    $this->pass(t('testCountrySpoofing passed.'));
  }

  /**
   * Tests manual lookup
   */
  function testIPManualLookup() {
    //$this->clickLink(t('Lookup'));
    $this->pass(t('testIPManualLookup passed.'));
  }

  /**
   * Tests DB download
   */
  function testDBDownload() {
    ip2country_empty_database();

    $this->assertTrue(
      (ip2country_get_count() == 0),
      t('Database is Empty.')
    );

    $rir = array_rand(array(
//    'afrinic' => 'AFRINIC', // Don't use AFRINIC because it's incomplete
      'arin'    => 'ARIN',
      'apnic'   => 'APNIC',
      'lacnic'  => 'LACNIC',
      'ripe'    => 'RIPE'
    ));
    ip2country_update_database($rir);

    $this->assertTrue(
      ($count = ip2country_get_count()) != 0,
      t('Database has been updated from %rir with @rows rows.', array('%rir' => strtoupper($rir), '@rows' => $count))
    );

    ip2country_empty_database();
    $this->assertTrue(
      (ip2country_get_count() == 0),
      t('Database is Empty.')
    );
  }

  /**
   * Tests manual DB update.
   */
  function testDBManualUpdate() {
    //$this->clickLink(t('Update'));
    $rows = db_select('ip2country')->countQuery()->execute()->fetchField();
    //$this->assertText(
    //  t('The IP to Country database has been updated from @rir. @rows rows affected.', array('@rir' => $rir, '@rows' => $rows)),
    //  t('Database was updated manually.')
    //);
    $this->pass(t('testDBManualUpdate passed.'));
  }

  /**
   * Tests cron DB update.
   */
  function testDBCronUpdate() {
    $this->pass(t('testDBCronUpdate passed.'));
  }

  /**
   * Tests logging of DB updates.
   */
  function testDBUpdateLogging() {
    // Turn off logging

    // Turn on logging
    $edit = array(
      'ip2country_watchdog' => array('test' => TRUE),
    );
    //$this->drupalPost(
    //  'admin/store/settings/countries/edit',
    //  $edit,
    //  t('Import')
    //);
    //$this->assertText(
    //  t('Database updated from @rir server.', array('@rir' => $rir)),
    //  t('Watchdog reported database update.')
    //);

    $this->pass(t('testDBUpdateLogging passed.'));
  }

  /**
   * Implements of tearDown().
   */
  function tearDown() {
    // Perform any clean-up tasks.
    variable_del('ip2country_populate_database_on_install');

    // Finally...
    parent::tearDown();
  }

}
